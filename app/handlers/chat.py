# app/handlers/chat.py
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ª–æ–≥–∏–∫–∏ —á–∞—Ç–∞ (–æ–±—ã—á–Ω–æ–≥–æ –∏ Max Mode).

import logging
import time
import asyncio

from aiogram import F, Router, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.markdown import hcode
from aiogram.exceptions import TelegramBadRequest
from openai import APIError

from app.database import Database
from app.config import MODEL_CATEGORIES, MODELS, MAX_MODE_PARTICIPANTS, DEFAULT_TEMPERATURE, MAX_MODE_ARBITER
from app.states import Chat, MaxMode
from app.keyboards.callbacks import Menu, Chat as ChatCallback, ModelCategory, SelectTextModel, MaxMode as MaxModeCallback
from app.keyboards.inline import (
    get_model_categories_menu, get_models_menu, get_chat_menu, get_max_mode_activation_menu, get_main_menu
)
from app.services.user_service import (
    get_user_level, get_user_limits, check_authentication, invalidate_user_cache, get_user_details_cached
)
from app.services.system_service import (
    is_model_available, are_max_mode_models_available, set_model_failed_in_cache
)
from app.services.ai_service import get_simple_response, get_max_mode_response
from .subscription import show_reward_offer

logger = logging.getLogger(__name__)
router = Router()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def animate_waiting(message: Message, text: str = "–î—É–º–∞—é"):
    frames = ["‚è≥", "‚åõÔ∏è"]
    i = 0
    # –ù–∞—á–∏–Ω–∞–µ–º —Å–æ –≤—Ç–æ—Ä–æ–≥–æ –∫–∞–¥—Ä–∞, —Ç–∞–∫ –∫–∞–∫ –ø–µ—Ä–≤—ã–π —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
    await asyncio.sleep(1.5)
    i = 1
    while True:
        try:
            await message.edit_text(f"{text}... {frames[i % len(frames)]}")
            i += 1
            await asyncio.sleep(1.5)
        except asyncio.CancelledError:
            break
        except Exception:
            break

async def send_limit_reached_message(message: Message, db: Database):
    user_id = message.from_user.id
    details = await get_user_details_cached(user_id, db, message.bot.get('cache'))
    has_bonus = details[8] if details else False
    user_level = await get_user_level(user_id, db)

    if user_level == 0 and not has_bonus:
        await show_reward_offer(message)
    else:
        await message.answer('–î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–ª—É—á—à–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏.')

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ ---
@router.callback_query(Menu.filter(F.action == 'models'))
async def list_model_categories(callback: CallbackQuery, state: FSMContext, db: Database, bot: Bot):
    await callback.answer()
    if not await check_authentication(callback.from_user, db, state, bot):
        return

    user_level = await get_user_level(callback.from_user.id, db)
    accessible_models = set(MODELS['free'])
    if user_level >= 1: accessible_models.update(MODELS['standard'])
    if user_level >= 2: accessible_models.update(MODELS['premium'])

    available_categories = [
        cat for cat, models_in_cat in MODEL_CATEGORIES.items()
        if any(m in accessible_models for m in models_in_cat)
    ]

    try:
        await callback.message.edit_text(
            '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
            reply_markup=get_model_categories_menu(available_categories)
        )
    except TelegramBadRequest as e:
        if "message is not modified" not in e.message:
            logger.error(f"Error in list_model_categories: {e}")

@router.callback_query(ModelCategory.filter())
async def list_models_in_category(callback: CallbackQuery, callback_data: ModelCategory, db: Database, cache: dict):
    await callback.answer()
    category = callback_data.name
    user_level = await get_user_level(callback.from_user.id, db)

    accessible_models = set(MODELS['free'])
    if user_level >= 1: accessible_models.update(MODELS['standard'])
    if user_level >= 2: accessible_models.update(MODELS['premium'])

    category_models = [m for m in MODEL_CATEGORIES.get(category, []) if m in accessible_models]

    try:
        await callback.message.edit_text(
            f'–ú–æ–¥–µ–ª–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{category}":',
            reply_markup=get_models_menu(category, category_models, cache['model_status'].get('statuses', {}))
        )
    except TelegramBadRequest as e:
        if "message is not modified" not in e.message:
            logger.error(f"Error in list_models_in_category: {e}")

@router.callback_query(SelectTextModel.filter(F.status == "failed"))
async def select_failed_model(callback: CallbackQuery):
    await callback.answer("‚ö†Ô∏è –≠—Ç–∞ –º–æ–¥–µ–ª—å —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é.", show_alert=True)

@router.callback_query(SelectTextModel.filter(F.status == "ok"))
async def select_model_handler(callback: CallbackQuery, callback_data: SelectTextModel, state: FSMContext, db: Database, cache: dict):
    await callback.answer()
    user_id = callback.from_user.id
    details = await get_user_details_cached(user_id, db, cache)

    if details and details[4]:
        await callback.message.edit_text('–í–∞—à –¥–æ—Å—Ç—É–ø –∫ –º–æ–¥–µ–ª—è–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')
        return

    daily_limit, _ = await get_user_limits(user_id, db)
    requests_today = await db.get_user_requests_today(user_id, is_max_mode=False)

    if requests_today >= daily_limit:
        await send_limit_reached_message(callback.message, db)
        return

    model = callback_data.model_name
    await db.set_last_used_model(user_id, model)
    invalidate_user_cache(user_id, cache)

    await state.set_state(Chat.in_progress)
    await state.update_data(model=model, history=[])
    await callback.message.edit_text(f'–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: <b>{model}</b>\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å.\n\n–î–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu')

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–±—ã—á–Ω–æ–≥–æ —á–∞—Ç–∞ ---
@router.callback_query(ChatCallback.filter(F.action == 'new'))
async def new_chat_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer("–ù–∞—á–∞—Ç –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥. –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω.")
    await state.update_data(history=[])
    model = (await state.get_data()).get('model', '–ù–µ –≤—ã–±—Ä–∞–Ω–∞')
    await callback.message.edit_text(f'<b>–ú–æ–¥–µ–ª—å: {model}</b>\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å.')

@router.message(Chat.in_progress)
async def handle_chat_message(message: Message, state: FSMContext, db: Database, ai_client, cache: dict):
    user_id = message.from_user.id
    details = await get_user_details_cached(user_id, db, cache)

    if details and details[4]:
        await message.answer('–í–∞—à –¥–æ—Å—Ç—É–ø –∫ –º–æ–¥–µ–ª—è–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.')
        return

    daily_limit, _ = await get_user_limits(user_id, db)
    requests_today = await db.get_user_requests_today(user_id, is_max_mode=False)

    if requests_today >= daily_limit:
        await state.clear()
        await send_limit_reached_message(message, db)
        return

    user_data = await state.get_data()
    model = user_data.get('model')
    history = user_data.get('history', [])

    if not is_model_available(model, cache):
        await message.answer(
            f"üò• –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å <b>{model}</b> —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å.",
            reply_markup=get_chat_menu()
        )
        return

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É —Å –ø–µ—Ä–≤—ã–º –∫–∞–¥—Ä–æ–º –∞–Ω–∏–º–∞—Ü–∏–∏ ---
    msg = await message.answer('–î—É–º–∞—é... ‚è≥')
    animation_task = asyncio.create_task(animate_waiting(msg))
    history.append({"role": "user", "content": message.text})

    try:
        response_text, duration = await get_simple_response(ai_client, model, history, user_id, db, cache)
        animation_task.cancel()
        history.append({"role": "assistant", "content": response_text})
        await state.update_data(history=history[-10:])
        await db.add_request(user_id, model, is_max_mode=False)
        temp = details[11] if details and details[11] is not None else DEFAULT_TEMPERATURE
        footer = f"\n\n---\n–ú–æ–¥–µ–ª—å: {model} | t: {temp:.1f} | –í—Ä–µ–º—è: {duration:.2f} —Å–µ–∫."
        await msg.edit_text(response_text + footer)
    except (APIError, RuntimeError) as e:
        animation_task.cancel()
        set_model_failed_in_cache(model, cache)
        history.pop()
        await state.update_data(history=history)
        logger.error(f"Chat Error for user {user_id} with model {model}: {e}")
        await msg.edit_text(f"üò• –ú–æ–¥–µ–ª—å <b>{model}</b> –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞).\n\n–û–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å.")
    except Exception as e:
        animation_task.cancel()
        history.pop()
        await state.update_data(history=history)
        logger.error(f"Generic Chat Error for user {user_id} with model {model}: {e}", exc_info=True)
        await msg.edit_text(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}')

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Max Mode ---
@router.callback_query(Menu.filter(F.action == 'max_mode'))
async def max_mode_intro(callback: CallbackQuery, db: Database, cache: dict):
    await callback.answer()
    user_id = callback.from_user.id
    if await get_user_level(user_id, db) != 3:
        await callback.answer("üöÄ Max Mode –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —É—Ä–æ–≤–Ω—è Max.", show_alert=True)
        return

    if not are_max_mode_models_available(cache):
        await callback.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–¥–µ–ª–µ–π –¥–ª—è Max Mode —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        return

    _, max_mode_limit = await get_user_limits(user_id, db)
    requests_today = await db.get_user_requests_today(user_id, is_max_mode=True)
    models_list_str = "\n".join(f"  ‚Ä¢ {hcode(m)}" for m in MAX_MODE_PARTICIPANTS)
    text = (
        "<b>üöÄ –†–µ–∂–∏–º Max Mode</b>\n\n"
        "–≠—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è "
        "—Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≤–µ–¥—É—â–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–∞.\n\n"
        f"<b>–ú–æ–¥–µ–ª–∏-—É—á–∞—Å—Ç–Ω–∏–∫–∏:</b>\n{models_list_str}\n\n"
        f"<b>–õ–∏–º–∏—Ç:</b> {requests_today} / {max_mode_limit} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å.\n"
        "–û–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –≤ —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ —Å–ø–∏—Å—ã–≤–∞–µ—Ç –æ–¥–Ω—É –µ–¥–∏–Ω–∏—Ü—É –ª–∏–º–∏—Ç–∞ Max Mode."
    )
    await callback.message.edit_text(text, reply_markup=get_max_mode_activation_menu())

@router.callback_query(MaxModeCallback.filter(F.action == "activate"))
async def activate_max_mode(callback: CallbackQuery, state: FSMContext, db: Database, cache: dict):
    await callback.answer()
    user_id = callback.from_user.id
    if not are_max_mode_models_available(cache):
        await callback.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–¥–µ–ª–µ–π –¥–ª—è Max Mode —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        return

    _, max_mode_limit = await get_user_limits(user_id, db)
    requests_today = await db.get_user_requests_today(user_id, is_max_mode=True)

    if requests_today >= max_mode_limit:
        await callback.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ Max Mode.", show_alert=True)
        return

    await state.set_state(MaxMode.in_progress)
    await callback.message.edit_text(
        "<b>üöÄ Max Mode –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å. –û–Ω –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.\n\n"
        "–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu."
    )

@router.callback_query(MaxModeCallback.filter(F.action == "exit"))
async def exit_max_mode(callback: CallbackQuery, state: FSMContext, db: Database):
    await callback.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ Max Mode.")
    await state.clear()
    await callback.message.edit_text(
        '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
        reply_markup=await get_main_menu(callback.from_user.id, db)
    )

@router.message(MaxMode.in_progress)
async def handle_max_mode_message(message: Message, state: FSMContext, db: Database, ai_client, cache: dict):
    user_id = message.from_user.id
    if not are_max_mode_models_available(cache):
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–¥–µ–ª–µ–π –¥–ª—è Max Mode —Å—Ç–∞–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –†–µ–∂–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω.")
        await state.clear()
        return

    _, max_mode_limit = await get_user_limits(user_id, db)
    requests_today = await db.get_user_requests_today(user_id, is_max_mode=True)

    if requests_today >= max_mode_limit:
        await message.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ Max Mode. –†–µ–∂–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω.")
        await state.clear()
        return

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –¢–æ –∂–µ —Å–∞–º–æ–µ –¥–ª—è Max Mode ---
    msg = await message.answer("–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏... ‚è≥")
    animation_task = asyncio.create_task(animate_waiting(msg, text="–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏"))

    try:
        response_text, duration = await get_max_mode_response(ai_client, message.text, user_id, db, cache)
        animation_task.cancel()
        await db.add_request(user_id, "max_mode_ensemble", is_max_mode=True)
        participants_str = ", ".join(f"{hcode(m)}" for m in MAX_MODE_PARTICIPANTS)
        footer = (
            f"\n\n"
            f"--- üöÄ Max Mode ---\n"
            f"<b>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</b> {participants_str}\n"
            f"<b>–ê—Ä–±–∏—Ç—Ä:</b> {hcode(MAX_MODE_ARBITER)}\n"
            f"<b>–í—Ä–µ–º—è:</b> {duration:.2f} —Å–µ–∫."
        )
        await msg.edit_text(response_text + footer)
    except RuntimeError as e:
        animation_task.cancel()
        logger.error(f"Max Mode runtime error for user {user_id}: {e}")
        await msg.edit_text(f"üò• <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ Max Mode:</b>\n{e}")
    except Exception as e:
        animation_task.cancel()
        logger.error(f"Generic Max Mode error for user {user_id}: {e}", exc_info=True)
        await msg.edit_text(f"üò• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ Max Mode: {e}")