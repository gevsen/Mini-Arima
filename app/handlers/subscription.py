# app/handlers/subscription.py
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥.

import logging
from datetime import datetime, timezone

from aiogram import F, Router, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.markdown import hcode
from aiogram.exceptions import TelegramBadRequest

from app.database import Database
from app.config import ADMIN_IDS, REWARD_CHANNELS, REWARD_LIMIT, LIMITS, PRICES, MODELS
from app.keyboards.callbacks import Menu, SubscriptionDetails, Reward
from app.keyboards.inline import (
    get_subscription_menu, get_subscription_details_menu, get_reward_menu, get_main_menu
)
from app.services.user_service import (
    get_user_level, get_user_limits, check_authentication, get_user_details_cached, invalidate_user_cache
)

logger = logging.getLogger(__name__)
router = Router()

async def show_reward_offer(message: Message):
    if not REWARD_CHANNELS:
        await message.answer('–î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤.')
        return

    text = (
        "<b>–ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã!</b>\n\n"
        f"–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ? –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã –∏ –ø–æ–ª—É—á–∏—Ç–µ "
        f"<b>{REWARD_LIMIT} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å</b> –≤–º–µ—Å—Ç–æ {LIMITS[0]['daily']}!\n"
    )
    await message.answer(text, reply_markup=get_reward_menu(REWARD_CHANNELS), disable_web_page_preview=True)

@router.callback_query(Menu.filter(F.action == 'subscription'))
async def subscription_menu_handler(callback: CallbackQuery, state: FSMContext, db: Database, cache: dict, bot: Bot):
    if not await check_authentication(callback.from_user, db, state, bot):
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É.", show_alert=True)
        return
    
    await callback.answer()
    user_id = callback.from_user.id
    user_level = await get_user_level(user_id, db)

    if user_id in ADMIN_IDS:
        text = (
            "<b>–í–∞—à —Å—Ç–∞—Ç—É—Å: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</b>\n\n"
            "–¢–µ–∫—É—â–∏–π –ø–ª–∞–Ω: Max (‚àû)\n"
            "–í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –≤–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª."
        )
    else:
        requests_today = await db.get_user_requests_today(user_id)
        max_requests_today = await db.get_user_requests_today(user_id, is_max_mode=True)
        daily_limit, max_mode_limit = await get_user_limits(user_id, db)
        details = await get_user_details_cached(user_id, db, cache)
        has_bonus = details[8] if details else False
        plan_name = {0: "Free", 1: "Standard", 2: "Premium", 3: "Max"}[user_level]
        if user_level == 0 and has_bonus:
            plan_name = "Free (–ë–æ–Ω—É—Å–Ω—ã–π)"

        text = f'<b>‚≠ê –í–∞—à –ø–ª–∞–Ω: {plan_name}</b>\n\n'
        text += f'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è:\n'
        text += f' ‚Ä¢ –û–±—ã—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: {requests_today} / {daily_limit}\n'
        if user_level == 3:
            text += f' ‚Ä¢ Max Mode –∑–∞–ø—Ä–æ—Å—ã: {max_requests_today} / {max_mode_limit}\n'

        sub_end_str = details[3] if details else None
        if sub_end_str and user_level > 0:
            try:
                subscription_end = datetime.fromisoformat(sub_end_str)
                if subscription_end > datetime.now(timezone.utc):
                    remaining = subscription_end - datetime.now(timezone.utc)
                    text += f'\n–î–æ –∫–æ–Ω—Ü–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {remaining.days} –¥ {remaining.seconds // 3600} —á\n'
            except (ValueError, TypeError):
                pass
    try:
        await callback.message.edit_text(text, reply_markup=get_subscription_menu())
    except TelegramBadRequest as e:
        if "message is not modified" not in e.message:
            logger.error(f"Error in subscription_menu_handler: {e}")

@router.callback_query(SubscriptionDetails.filter())
async def subscription_details_handler(callback: CallbackQuery, callback_data: SubscriptionDetails):
    await callback.answer()
    level = callback_data.level
    plan_name = {1: "Standard", 2: "Premium", 3: "Max"}[level]
    price = PRICES[level]
    limits = LIMITS[level]

    accessible_models_levels = ['free']
    if level >= 1: accessible_models_levels.append('standard')
    if level >= 2: accessible_models_levels.append('premium')

    models_set = set(m for lvl in accessible_models_levels for m in MODELS.get(lvl, []))
    models_text_html = ", ".join(sorted(list(models_set)))

    text_html = (
        f"<b>–ü–æ–¥–ø–∏—Å–∫–∞ ¬´{plan_name}¬ª</b>\n\n"
        f"<b>–¶–µ–Ω–∞:</b> {price}‚ÇΩ / –º–µ—Å—è—Ü\n"
        f"<b>–õ–∏–º–∏—Ç—ã:</b>\n"
        f" ‚Ä¢ {limits['daily']} –æ–±—ã—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å\n"
    )
    if limits['max_mode'] > 0:
        text_html += f" ‚Ä¢ {limits['max_mode']} Max Mode –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å\n"
    text_html += f"\n<b>–î–æ—Å—Ç—É–ø –∫ –º–æ–¥–µ–ª—è–º:</b>\n<pre>{models_text_html}</pre>"

    try:
        await callback.message.edit_text(text_html, reply_markup=get_subscription_details_menu(level))
    except TelegramBadRequest as e:
        if "message is not modified" not in e.message:
            logger.error(f"Error in subscription_details_handler: {e}")

@router.callback_query(Reward.filter(F.action == "check"))
async def check_reward_subscription_handler(callback: CallbackQuery, db: Database, cache: dict):
    user_id = callback.from_user.id
    if not REWARD_CHANNELS:
        return await callback.answer("–ë–æ–Ω—É—Å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.", show_alert=True)

    try:
        for channel in REWARD_CHANNELS:
            member = await callback.bot.get_chat_member(chat_id=channel['id'], user_id=user_id)
            if member.status not in ['member', 'administrator', 'creator']:
                await callback.answer(f"–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª {channel['name']}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–ø–∏—Å–∫–∏.", show_alert=True)
                return

        await db.set_reward_bonus(user_id)
        invalidate_user_cache(user_id, cache)
        await callback.answer("–ë–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω!", show_alert=True)
        await callback.message.edit_text(
            f"üéâ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —É–≤–µ–ª–∏—á–µ–Ω –¥–æ <b>{REWARD_LIMIT}</b> –∑–∞–ø—Ä–æ—Å–æ–≤. –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å.",
            reply_markup=await get_main_menu(user_id, db)
        )
    except Exception as e:
        logger.error(f"Error checking reward subscription for {user_id}: {e}")
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)