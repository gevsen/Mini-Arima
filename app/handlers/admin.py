# app/handlers/admin.py

import asyncio
import logging
from datetime import datetime, timezone

from aiogram import F, Router, Bot
from aiogram.filters import BaseFilter, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.markdown import hcode
from aiogram.exceptions import TelegramForbiddenError, TelegramBadRequest

from app.database import Database
from app.config import ADMIN_IDS, MSK_TZ
from app.states import Admin as AdminState
# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã ---
from app.keyboards.callbacks import Menu, AdminMenu, AdminUserAction, AdminUserBrowse
from app.keyboards.inline import (
    get_admin_menu, get_admin_users_menu, get_user_card_menu, 
    get_user_browse_menu, get_back_to_admin_menu
)
from app.services.user_service import (
    get_user_id_from_input, invalidate_user_cache, get_user_limits
)

logger = logging.getLogger(__name__)
router = Router()

# --- –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---
class IsAdmin(BaseFilter):
    async def __call__(self, event: Message | CallbackQuery) -> bool:
        return event.from_user.id in ADMIN_IDS

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫–æ –≤—Å–µ–º—É —Ä–æ—É—Ç–µ—Ä—É - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –∫–æ–≥–¥–∞ –∫–æ–ª–±—ç–∫–∏ –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è
router.message.filter(IsAdmin())
router.callback_query.filter(IsAdmin())

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def format_user_card(user_id: int, db: Database) -> tuple[str, AdminUserAction | None]:
    details = await db.get_user_details(user_id)
    if not details:
        return f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.", None
        
    (uid, uname, s_level, s_end, blocked, last_model, created, verified, 
     rewarded, last_image_model, user_instr, user_temp) = details
     
    plan_name = {0: "Free", 1: "Standard", 2: "Premium", 3: "Max"}[s_level]
    if s_level == 0 and rewarded:
        plan_name = "Free (–ë–æ–Ω—É—Å–Ω—ã–π)"
        
    s_end_str = "N/A"
    if s_end and s_level > 0:
        try:
            s_end_dt = datetime.fromisoformat(s_end).astimezone(MSK_TZ)
            s_end_str = s_end_dt.strftime('%Y-%m-%d %H:%M')
        except (ValueError, TypeError): pass
    
    created_dt = datetime.fromisoformat(created).astimezone(MSK_TZ)
    created_str = created_dt.strftime('%Y-%m-%d %H:%M')
    
    requests_today = await db.get_user_requests_today(uid)
    max_requests_today = await db.get_user_requests_today(uid, is_max_mode=True)
    daily_limit, max_limit = await get_user_limits(uid, db)
    
    text = [
        f"<b>–ö–∞—Ä—Ç–æ—á–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>",
        f"<b>ID:</b> {hcode(str(uid))}",
        f"<b>Username:</b> @{uname or 'N/A'}",
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {'‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' if blocked else '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω'}",
        f"<b>–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è:</b> {'‚úÖ –ü—Ä–æ–π–¥–µ–Ω–∞' if verified else '‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–∞'}",
        f"<b>–ü–ª–∞–Ω:</b> {plan_name} (–¥–æ {s_end_str})" if s_level > 0 else f"<b>–ü–ª–∞–Ω:</b> {plan_name}",
        f"<b>–ó–∞–ø—Ä–æ—Å—ã —Å–µ–≥–æ–¥–Ω—è:</b> {requests_today}/{daily_limit if daily_limit != float('inf') else '‚àû'}",
    ]
    if s_level == 3:
        text.append(f"<b>Max –∑–∞–ø—Ä–æ—Å—ã —Å–µ–≥–æ–¥–Ω—è:</b> {max_requests_today}/{max_limit if max_limit != float('inf') else '‚àû'}")
    
    text.extend([
        f"<b>–ü–æ—Å–ª–µ–¥–Ω—è—è –º–æ–¥–µ–ª—å:</b> {hcode(last_model or 'N/A')}",
        f"<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {created_str} –ú–°–ö"
    ])
    
    keyboard = get_user_card_menu(user_id=uid, is_blocked=bool(blocked))
    return "\n".join(text), keyboard

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ ---
@router.callback_query(Menu.filter(F.action == 'admin'))
async def admin_main_menu(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text('üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', reply_markup=get_admin_menu())

@router.callback_query(AdminMenu.filter(F.level == 1 and F.action == 'back'))
async def back_to_admin_menu(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    await callback.message.edit_text('üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', reply_markup=get_admin_menu())

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ ---
@router.callback_query(AdminMenu.filter(F.level == 0 and F.action == 'users'))
async def admin_users_menu(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text('üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏', reply_markup=get_admin_users_menu())

# --- –ü–æ–∏—Å–∫, –≤—ã–¥–∞—á–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —Ç.–¥. ---
@router.callback_query(AdminMenu.filter(F.level == 1 and F.action == 'find_user'))
async def find_user_start(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(AdminState.waiting_for_find_user)
    await callback.message.edit_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∏–ª–∏ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞.")

@router.message(AdminState.waiting_for_find_user)
async def find_user_process(message: Message, state: FSMContext, db: Database):
    await state.clear()
    user_id = await get_user_id_from_input(message.text.strip(), db)
    if not user_id:
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.text} –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_back_to_admin_menu())
        return
    card_text, card_keyboard = await format_user_card(user_id, db)
    await message.answer(card_text, reply_markup=card_keyboard)

# --- –î–µ–π—Å—Ç–≤–∏—è –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
@router.callback_query(AdminUserAction.filter())
async def handle_user_action(callback: CallbackQuery, callback_data: AdminUserAction, db: Database, cache: dict, bot: Bot):
    user_id = callback_data.user_id
    action = callback_data.action

    actions = {
        'block': (lambda uid: db.block_user(uid, True), f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."),
        'unblock': (lambda uid: db.block_user(uid, False), f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."),
        'revoke': (lambda uid: db.update_subscription(uid, 0), f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è {user_id} –æ—Ç–æ–∑–≤–∞–Ω–∞.")
    }
    
    if action in actions:
        action_func, success_msg = actions[action]
        await action_func(user_id)
        invalidate_user_cache(user_id, cache)
        await callback.answer(success_msg, show_alert=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
        try:
            card_text, card_keyboard = await format_user_card(user_id, db)
            await callback.message.edit_text(card_text, reply_markup=card_keyboard)
        except TelegramBadRequest as e:
            if "message is not modified" not in e.message:
                logger.error(f"Failed to update user card for {user_id} after action: {e}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        notification_text = {
            'block': '–í–∞—à –¥–æ—Å—Ç—É–ø –∫ –º–æ–¥–µ–ª—è–º –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.',
            'unblock': '–í–∞—à –¥–æ—Å—Ç—É–ø –∫ –º–æ–¥–µ–ª—è–º –±—ã–ª —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.',
            'revoke': '–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –æ—Ç–æ–∑–≤–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Ä–æ–≤–µ–Ω—å Free.'
        }.get(action)
        if notification_text:
            try:
                await bot.send_message(user_id, notification_text)
            except TelegramForbiddenError:
                logger.warning(f"Could not notify user {user_id}, bot is blocked.")
            except Exception as e:
                logger.error(f"Failed to notify user {user_id}: {e}")

# --- –ü–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä ---
@router.callback_query(AdminUserBrowse.filter())
async def browse_users_handler(callback: CallbackQuery, callback_data: AdminUserBrowse, db: Database):
    await callback.answer()
    page = callback_data.page
    total_users = await db.get_user_count()
    total_pages = (total_users + 1 - 1) // 1 if total_users > 0 else 1
    
    if not 1 <= page <= total_pages: return
    user_data = await db.get_users_paginated(page=page, page_size=1)
    if not user_data:
        await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=get_back_to_admin_menu())
        return
        
    user_id = user_data[0][0]
    card_text, _ = await format_user_card(user_id, db)
    card_text += f"\n\n<i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {page} –∏–∑ {total_users}</i>"
    
    try:
        await callback.message.edit_text(card_text, reply_markup=get_user_browse_menu(page, total_pages))
    except TelegramBadRequest as e:
        if "message is not modified" not in e.message:
            logger.error(f"Error in browse_users_handler: {e}")

# --- –í—ã–¥–∞—á–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ---
@router.callback_query(AdminMenu.filter(F.level == 1 and F.action == 'grant'))
async def grant_sub_start(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(AdminState.waiting_for_grant)
    await callback.message.edit_text(
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∏–ª–∏ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏ (1, 2, –∏–ª–∏ 3) –∏ –∫–æ–ª-–≤–æ –¥–Ω–µ–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø–æ —É–º–æ–ª—á. 30).\n'
        '–§–æ—Ä–º–∞—Ç: <code>ID/username LEVEL [DAYS]</code>',
    )

@router.message(AdminState.waiting_for_grant)
async def grant_sub_process(message: Message, state: FSMContext, db: Database, cache: dict):
    await state.clear()
    parts = message.text.split()
    try:
        target_input = parts[0]
        level = int(parts[1])
        days = int(parts[2]) if len(parts) > 2 else 30
        if level not in [1, 2, 3]: raise ValueError("Invalid subscription level.")
        user_id = await get_user_id_from_input(target_input, db)
        if user_id:
            await db.update_subscription(user_id, level, days=days)
            invalidate_user_cache(user_id, cache)
            await message.answer(f'–ü–æ–¥–ø–∏—Å–∫–∞ —É—Ä–æ–≤–Ω—è {level} –Ω–∞ {days} –¥–Ω–µ–π –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_input}.', reply_markup=get_back_to_admin_menu())
            logger.info(f"Admin {message.from_user.id} granted level {level} for {days} days to user {user_id}")
        else:
            await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_input} –Ω–µ –Ω–∞–π–¥–µ–Ω.', reply_markup=get_back_to_admin_menu())
    except (ValueError, IndexError):
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.', reply_markup=get_back_to_admin_menu())

# --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –†–∞—Å—Å—ã–ª–∫–∞, –û—Ç—á–µ—Ç—ã ---
@router.callback_query(AdminMenu.filter(F.level == 0))
async def admin_main_actions(callback: CallbackQuery, callback_data: AdminMenu, db: Database, cache: dict, state: FSMContext):
    action = callback_data.action
    if action == 'stats':
        await callback.answer()
        total_users = await db.get_user_count()
        stats = await db.get_subscription_stats()
        text = (f'<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n'
                f' ‚Ä¢ Free: {stats.get(0, 0)}\n ‚Ä¢ Standard: {stats.get(1, 0)}\n'
                f' ‚Ä¢ Premium: {stats.get(2, 0)}\n ‚Ä¢ Max: {stats.get(3, 0)}')
        await callback.message.edit_text(text, reply_markup=get_back_to_admin_menu())
    elif action == 'report':
        await callback.answer()
        report_text = cache.get("model_status", {}).get("last_report", "–û—Ç—á–µ—Ç –µ—â–µ –Ω–µ –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω.")
        await callback.message.edit_text(report_text, reply_markup=get_back_to_admin_menu())
    elif action == 'broadcast':
        await callback.answer()
        await state.set_state(AdminState.waiting_for_broadcast)
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –û–Ω –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

@router.message(AdminState.waiting_for_broadcast)
async def broadcast_process(message: Message, state: FSMContext, db: Database, bot: Bot):
    await state.clear()
    await message.answer("–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    user_ids = await db.get_all_user_ids()
    success_count, fail_count = 0, 0
    for user_id in user_ids:
        try:
            await bot.send_message(user_id, message.text)
            success_count += 1
        except Exception:
            fail_count += 1
        await asyncio.sleep(0.1)
    completion_text = f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n–£—Å–ø–µ—à–Ω–æ: {success_count}\n–ù–µ—É–¥–∞—á–Ω–æ: {fail_count}"
    await message.answer(completion_text, reply_markup=get_back_to_admin_menu())