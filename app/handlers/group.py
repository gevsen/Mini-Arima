# app/handlers/group.py
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö

import logging
import asyncio
import aiohttp
import time

from aiogram import F, Router, Bot
from aiogram.types import Message
from aiogram.utils.markdown import hcode

from app.database import Database
from app.config import (
    GROUP_TEXT_TRIGGER, GROUP_IMAGE_TRIGGER, DEFAULT_TEXT_MODEL, 
    DEFAULT_IMAGE_MODEL, API_URL, API_KEY
)
from app.services.user_service import get_user_details_cached, get_user_limits
from app.services.system_service import is_model_available, set_model_failed_in_cache
from app.services.ai_service import get_simple_response
from .chat import animate_waiting # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∏–∑ —Å–æ—Å–µ–¥–Ω–µ–≥–æ –º–æ–¥—É–ª—è

logger = logging.getLogger(__name__)
router = Router()

# –§–∏–ª—å—Ç—Ä, —á—Ç–æ–±—ã —Ö–µ–Ω–¥–ª–µ—Ä—ã —Ä–∞–±–æ—Ç–∞–ª–∏ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞—Ö
IS_GROUP = F.chat.type.in_({'group', 'supergroup'})

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (.text) ---
@router.message(IS_GROUP, F.text.startswith(GROUP_TEXT_TRIGGER))
async def handle_group_text_trigger(message: Message, db: Database, ai_client, cache: dict):
    prompt = message.text[len(GROUP_TEXT_TRIGGER):].strip()
    if not prompt:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –ø–æ—Å–ª–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç

    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –æ–Ω
    user_details = await get_user_details_cached(user_id, db, cache)
    if not user_details or not user_details[7]: # –ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ –ø—Ä–æ—à–µ–ª –∫–∞–ø—á—É
        return
    if user_details[4]: # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
    daily_limit, _ = await get_user_limits(user_id, db)
    requests_today = await db.get_user_requests_today(user_id, is_max_mode=False)
    if requests_today >= daily_limit:
        try:
            await message.reply("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ª–∏–º–∏—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.", disable_notification=True)
        except Exception:
            pass
        return

    model_to_use = user_details[5] or DEFAULT_TEXT_MODEL
    if not is_model_available(model_to_use, cache):
        try:
            await message.reply(f"–ú–æ–¥–µ–ª—å {hcode(model_to_use)} —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", disable_notification=True)
        except Exception:
            pass
        return

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É —Å –ø–µ—Ä–≤—ã–º –∫–∞–¥—Ä–æ–º –∞–Ω–∏–º–∞—Ü–∏–∏ ---
    msg = await message.reply('–î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º... ‚è≥', disable_notification=True)
    animation_task = asyncio.create_task(animate_waiting(msg))

    try:
        response_text, duration = await get_simple_response(
            ai_client, model_to_use, [{"role": "user", "content": prompt}], user_id, db, cache
        )
        animation_task.cancel()
        await db.add_request(user_id, model_to_use, is_max_mode=False)
        footer = f"\n\n---\n–ú–æ–¥–µ–ª—å: {hcode(model_to_use)} | –í—Ä–µ–º—è: {duration:.2f} —Å–µ–∫."
        await msg.edit_text(response_text + footer)
    except Exception as e:
        animation_task.cancel()
        logger.error(f"Group text handler error for user {user_id}: {e}")
        await msg.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (.image) ---
@router.message(IS_GROUP, F.text.startswith(GROUP_IMAGE_TRIGGER))
async def handle_group_image_trigger(message: Message, db: Database, cache: dict):
    prompt = message.text[len(GROUP_IMAGE_TRIGGER):].strip()
    if not prompt:
        return

    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –æ–Ω
    user_details = await get_user_details_cached(user_id, db, cache)
    if not user_details or not user_details[7]: # –ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ –ø—Ä–æ—à–µ–ª –∫–∞–ø—á—É
        return
    if user_details[4]: # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    from app.services.user_service import get_user_level
    user_level = await get_user_level(user_id, db)
    if user_level < 2:
        return # –ú–æ–ª—á–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –Ω—É–∂–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
    daily_limit, _ = await get_user_limits(user_id, db)
    requests_today = await db.get_user_requests_today(user_id, is_max_mode=False)
    if requests_today >= daily_limit:
        try:
            await message.reply("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ª–∏–º–∏—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.", disable_notification=True)
        except Exception:
            pass
        return

    model_to_use = user_details[9] or DEFAULT_IMAGE_MODEL
    if not is_model_available(model_to_use, cache):
        try:
            await message.reply(f"–ú–æ–¥–µ–ª—å {hcode(model_to_use)} —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", disable_notification=True)
        except Exception:
            pass
        return

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É —Å –ø–µ—Ä–≤—ã–º –∫–∞–¥—Ä–æ–º –∞–Ω–∏–º–∞—Ü–∏–∏ ---
    msg = await message.reply('–¢–≤–æ—Ä—é... ‚è≥', disable_notification=True)
    animation_task = asyncio.create_task(animate_waiting(msg, text="–¢–≤–æ—Ä—é"))
    
    start_time = time.time()

    async with aiohttp.ClientSession() as session:
        url = f"{API_URL}/images/generations"
        headers = {"Authorization": f"Bearer {API_KEY}", "Content-Type": "application/json"}
        payload = {"model": model_to_use, "prompt": prompt, "height": 1024, "width": 1024, "response_format": "url"}
        try:
            async with session.post(url, headers=headers, json=payload, timeout=180) as response:
                animation_task.cancel()
                if response.status == 200:
                    duration = time.time() - start_time
                    data = await response.json()
                    image_url = data['data'][0]['url']
                    await db.add_request(user_id, model_to_use, is_max_mode=False)
                    await msg.delete()
                    
                    caption_text = (
                        f"<b>–ú–æ–¥–µ–ª—å:</b> {hcode(model_to_use)}\n"
                        f"<b>–í—Ä–µ–º—è:</b> {duration:.2f} —Å–µ–∫.\n\n"
                        f"<b>–ü—Ä–æ–º–ø—Ç:</b> {hcode(prompt)}"
                    )
                    await message.reply_photo(photo=image_url, caption=caption_text)
                else:
                    set_model_failed_in_cache(model_to_use, cache)
                    error_text = await response.text()
                    await msg.edit_text(f"üò• –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.\n<b>–°—Ç–∞—Ç—É—Å:</b> {response.status}\n<b>–û—Ç–≤–µ—Ç:</b> {error_text}")
        except Exception as e:
            animation_task.cancel()
            set_model_failed_in_cache(model_to_use, cache)
            logger.error(f"Group image generation failed for user {user_id} with model {model_to_use}. Error: {e}", exc_info=True)
            await msg.edit_text(f"üò• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", parse_mode=None)