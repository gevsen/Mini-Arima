# app/handlers/common.py
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥, —Ç–∞–∫–∏—Ö –∫–∞–∫ start, menu, help –∏ –∫–∞–ø—á–∞.

import logging
import random
from datetime import datetime

from aiogram import F, Router, Bot
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.markdown import hcode
from aiogram.exceptions import TelegramBadRequest

from app.database import Database
from app.config import ADMIN_IDS, CAPTCHA_VARIANTS, MSK_TZ, LIMITS, REWARD_LIMIT
from app.states import Captcha, Chat, MaxMode
from app.keyboards.inline import get_main_menu, get_chat_menu
from app.keyboards.callbacks import Menu, Chat as ChatCallback
from app.services.user_service import invalidate_user_cache, check_authentication, get_user_level

logger = logging.getLogger(__name__)
router = Router()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@router.message(Command('start'), F.chat.type == "private")
async def start_handler(message: Message, state: FSMContext, db: Database, bot: Bot, cache: dict):
    await state.clear()
    user = message.from_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î, –∏ –¥–æ–±–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç
    user_in_db = await db.get_user(user.id)
    if not user_in_db:
        is_new = await db.add_user(user.id, user.username)
        if is_new:
            logger.info(f"New user registered: {user.full_name} (@{user.username}, ID: {user.id})")
            notification_text = f"üéâ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n\nID: {hcode(str(user.id))}\nUsername: @{user.username or 'N/A'}"
            for admin_id in ADMIN_IDS:
                try:
                    await bot.send_message(admin_id, notification_text)
                except Exception as e:
                    logger.warning(f"Failed to send new user notification to admin {admin_id}: {e}")
            await db.set_user_verified(user.id, False)
            invalidate_user_cache(user.id, cache)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é (–∫–∞–ø—á—É)
    if not await check_authentication(user, db, state, bot):
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–¥–º–∏–Ω –ª–∏ —ç—Ç–æ, –∏ –≤—ã–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if user.id in ADMIN_IDS and await get_user_level(user.id, db) != 3:
        await db.update_subscription(user.id, 3)
        invalidate_user_cache(user.id, cache)
        logger.info(f"Admin user {user.id} detected. Subscription level set to 3 (Max).")

    current_time_msk = datetime.now(MSK_TZ).strftime("%H:%M –ú–°–ö")
    await message.answer(
        f'–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ MiniArima!\n\n–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: <b>{current_time_msk}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=await get_main_menu(user.id, db)
    )

# --- –ò–ó–ú–ï–ù–ï–ù–ù–´–ô –•–ï–ù–î–õ–ï–† /menu ---
@router.message(Command('menu'), F.chat.type == "private")
async def menu_handler(message: Message, state: FSMContext, db: Database, bot: Bot, cache: dict):
    user = message.from_user
    
    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î. –ï—Å–ª–∏ –Ω–µ—Ç - —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º.
    # –≠—Ç–æ –∫–ª—é—á–µ–≤–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.
    user_in_db = await db.get_user(user.id)
    if not user_in_db:
        logger.info(f"User {user.id} used /menu without being in DB. Redirecting to start logic.")
        # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º —Ö–µ–Ω–¥–ª–µ—Ä start, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
        await start_handler(message, state, db, bot, cache)
        return

    # –®–∞–≥ 2: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é (–∫–∞–ø—á—É).
    if not await check_authentication(user, db, state, bot):
        return

    # –®–∞–≥ 3: –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é.
    current_state = await state.get_state()
    is_max_mode = current_state == MaxMode.in_progress

    if current_state in [Chat.in_progress, MaxMode.in_progress]:
        await message.answer('–ú–µ–Ω—é –¥–∏–∞–ª–æ–≥–∞:', reply_markup=get_chat_menu(is_max_mode))
    else:
        await state.clear()
        await message.answer(
            '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
            reply_markup=await get_main_menu(message.from_user.id, db)
        )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤ ---
@router.callback_query(Menu.filter(F.action == 'back_main'))
@router.callback_query(ChatCallback.filter(F.action == 'back_to_main'))
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext, db: Database):
    await callback.answer()
    await state.clear()
    try:
        await callback.message.edit_text(
            '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
            reply_markup=await get_main_menu(callback.from_user.id, db)
        )
    except TelegramBadRequest as e:
        if "message is not modified" not in e.message:
            logger.error(f"Error in back_to_main_menu: {e}")

@router.callback_query(Menu.filter(F.action == 'help'))
async def help_handler(callback: CallbackQuery, db: Database):
    await callback.answer()
    text = (
        f'<b>‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞</b>\n\n'
        f'<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n'
        f'<code>/start</code> - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n'
        f'<code>/menu</code> - –º–µ–Ω—é –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç\n\n'
        f'<b>–õ–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å:</b>\n'
        f' ‚Ä¢ <b>Free:</b> {LIMITS[0]["daily"]} (–∏–ª–∏ {REWARD_LIMIT} —Å –±–æ–Ω—É—Å–æ–º)\n'
        f' ‚Ä¢ <b>Standard:</b> {LIMITS[1]["daily"]}\n'
        f' ‚Ä¢ <b>Premium:</b> {LIMITS[2]["daily"]}\n'
        f' ‚Ä¢ <b>Max:</b> {LIMITS[3]["daily"]} –æ–±—ã—á–Ω—ã—Ö + {LIMITS[3]["max_mode"]} Max Mode'
    )
    try:
        await callback.message.edit_text(text, reply_markup=await get_main_menu(callback.from_user.id, db))
    except TelegramBadRequest as e:
        if "message is not modified" not in e.message:
            raise

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ö–∞–ø—á–∏ ---
@router.message(Captcha.waiting_for_answer)
async def process_captcha(message: Message, state: FSMContext, db: Database, cache: dict):
    user_data = await state.get_data()
    correct_answer = user_data.get('captcha_answer')

    if message.text and message.text.strip().lower() == correct_answer.lower():
        await db.set_user_verified(message.from_user.id, True)
        invalidate_user_cache(message.from_user.id, cache)
        await state.clear()
        await message.answer(
            "‚úÖ –í–µ—Ä–Ω–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å.",
            reply_markup=await get_main_menu(message.from_user.id, db)
        )
        logger.info(f"User {message.from_user.id} passed captcha.")
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        question, answer = random.choice(CAPTCHA_VARIANTS)
        await state.update_data(captcha_answer=answer)
        await message.answer(f"–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å:\n<b>{question}</b>")
        logger.info(f"User {message.from_user.id} failed captcha.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
@router.message(F.chat.type == "private", StateFilter(None))
async def unhandled_private_message(message: Message, state: FSMContext, db: Database, bot: Bot):
    if not await check_authentication(message.from_user, db, state, bot):
        return
    await message.answer(
        '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è —á–∞—Ç–∞ –∏–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ Max Mode.',
        reply_markup=await get_main_menu(message.from_user.id, db)
    )