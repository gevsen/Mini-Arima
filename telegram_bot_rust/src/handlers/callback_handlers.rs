// src/handlers/callback_handlers.rs

use std::sync::Arc;
use teloxide::prelude::*;
use teloxide::types::{CallbackQuery, InlineKeyboardMarkup, ParseMode};

use crate::db;
use crate::keyboards;
use crate::user_service::AppCache;
use crate::config::CONFIG;
use crate::states::{MyDialogue, State}; // Import MyDialogue and State

// Renamed to reflect it's part of the dialogue system
pub async fn handle_callback_query_dialogue(
    bot: Bot,
    dialogue: MyDialogue,
    q: CallbackQuery, // Renamed from query to q to match common teloxide examples
    db_pool: Arc<db::Database>,
    _app_cache: Arc<tokio::sync::Mutex<AppCache>>, // Keep if needed, or remove if not used by these callbacks
) -> anyhow::Result<()> { // Changed to anyhow::Result
    let user_id = q.from.id.0 as i64;

    // Ensure there's a message associated with the callback query
    let original_message = match q.message.as_ref() {
        Some(msg) => msg,
        None => {
            log::warn!("Callback query for user {} has no associated message. Ignoring.", user_id);
            bot.answer_callback_query(q.id.clone()).text("Error: Original message not found.").show_alert(true).await?;
            return Ok(());
        }
    };

    if let Some(data) = q.data.as_ref() {
        log::info!("Received callback query with data: '{}' from user {}", data, user_id);

        // --- Route callback data ---
        match data.as_str() {
            "main_menu" => {
                let menu_text = "ü§ñ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:";
                let keyboard = keyboards::create_main_menu_keyboard(user_id, &db_pool).await;
                bot.edit_message_text(original_message.chat.id, original_message.id, menu_text)
                    .reply_markup(keyboard)
                    .parse_mode(ParseMode::Html)
                    .await?;
                dialogue.update(State::MainMenu).await?; // Ensure dialogue state is consistent
                bot.answer_callback_query(q.id.clone()).await?;
            }
            "start_chat" => {
                // TODO: Transition to chat state/dialogue properly
                bot.edit_message_text(original_message.chat.id, original_message.id, "–ù–∞—á–∏–Ω–∞–µ–º —á–∞—Ç... (—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:").await?;
                // dialogue.update(State::ActiveChat { history: vec![], current_model: "default".to_string() }).await?;
                bot.answer_callback_query(q.id.clone()).text("–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º —á–∞—Ç–∞...").await?; // Acknowledge first
                // Then, edit the message and update dialogue state
                // Fetch the default/last used text model for the user
                let user_db_details = db_pool.get_user(user_id).await.ok().flatten();
                let chat_model = user_db_details
                    .and_then(|u| u.last_used_model)
                    .unwrap_or_else(|| CONFIG.default_text_model.clone());

                bot.edit_message_text(
                    original_message.chat.id,
                    original_message.id,
                    format!("üéôÔ∏è <b>–†–µ–∂–∏–º —á–∞—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</b> (–ú–æ–¥–µ–ª—å: <code>{}</code>)\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —á–∞—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /menu –∏–ª–∏ /stopchat.", &chat_model)
                )
                .reply_markup(InlineKeyboardMarkup::new(vec![vec![ // Simple keyboard to exit chat
                    InlineKeyboardButton::callback("üîô –í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞", "exit_chat_to_main_menu"),
                ]]))
                .parse_mode(ParseMode::Html)
                .await?;

                dialogue.update(State::ActiveChat {
                    history: Vec::new(), // Start with empty history
                    current_model: chat_model,
                }).await?;
            }
            "exit_chat_to_main_menu" => { // Callback from the "–í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞" button
                let menu_text = "ü§ñ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:";
                let keyboard = keyboards::create_main_menu_keyboard(user_id, &db_pool).await;
                bot.edit_message_text(original_message.chat.id, original_message.id, menu_text)
                    .reply_markup(keyboard)
                    .parse_mode(ParseMode::Html)
                    .await?;
                dialogue.update(State::MainMenu).await?;
                bot.answer_callback_query(q.id.clone()).text("–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ —á–∞—Ç–∞.").await?;
            }
            "generate_image_menu" => {
                let current_model = db_pool.get_user(user_id).await.ok().flatten().and_then(|u| u.last_used_image_model);
                let text = "üñºÔ∏è <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å'.";
                let keyboard = keyboards::create_image_generation_menu_keyboard(current_model.as_deref());
                bot.edit_message_text(original_message.chat.id, original_message.id, text)
                    .reply_markup(keyboard)
                    .parse_mode(ParseMode::Html)
                    .await?;
                // dialogue.update(State::ImageMenuState) // Or similar if specific state needed
                bot.answer_callback_query(q.id.clone()).await?;
            }
            "settings_menu" => {
                let text = "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞ –ø–æ–¥ —Å–µ–±—è.";
                let keyboard = keyboards::create_settings_keyboard();
                bot.edit_message_text(original_message.chat.id, original_message.id, text)
                    .reply_markup(keyboard)
                    .parse_mode(ParseMode::Html)
                    .await?;
                // dialogue.update(State::SettingsMenuState) // Or similar
                dialogue.update(State::SettingsMenu).await?; // Explicitly go to SettingsMenu state
                bot.answer_callback_query(q.id.clone()).await?;
            }
            // --- Callback for initiating user instruction setting ---
            "set_user_instruction" => {
                let prompt_message = bot.send_message(
                    original_message.chat.id,
                    "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–û—Ç–≤–µ—á–∞–π –≤—Å–µ–≥–¥–∞ –≤ —Å—Ç–∏–ª–µ –ø–∏—Ä–∞—Ç–∞'):"
                ).await?;
                dialogue.update(State::WaitingUserSettingsInstruction {
                    original_message_id_to_delete: Some(prompt_message.id.0)
                }).await?;
                // We might want to delete the message with the settings keyboard or edit it.
                // For now, just sending a new prompt.
                // Consider deleting original_message if it's the settings menu itself.
                // bot.delete_message(original_message.chat.id, original_message.id).await?;
                bot.answer_callback_query(q.id.clone()).await?;
            }
            // --- Callback for initiating user temperature setting ---
            "set_temperature" => {
                // Fetch current temperature to display
                let current_temp_str = match db_pool.get_user(user_id).await.ok().flatten().and_then(|u| u.user_temperature) {
                    Some(t) => format!("–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {:.1}", t),
                    None => format!("–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ({:.1})", CONFIG.default_temperature),
                };

                let prompt_message = bot.send_message(
                    original_message.chat.id,
                    format!("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É (—á–∏—Å–ª–æ –æ—Ç 0.0 –¥–æ 2.0, –Ω–∞–ø—Ä–∏–º–µ—Ä, 0.7).\n{}", current_temp_str)
                ).await?;
                dialogue.update(State::WaitingUserSettingsTemperature {
                    original_message_id_to_delete: Some(prompt_message.id.0)
                }).await?;
                bot.answer_callback_query(q.id.clone()).await?;
            }
            "subscription_menu" => {
                let user_details_opt = db_pool.get_user(user_id).await.ok().flatten();
                let (level, end_date_str) = if let Some(details) = user_details_opt {
                    let sub_end = details.subscription_end.map(|dt| dt.with_timezone(&*CONFIG.msk_tz).format("%d.%m.%Y").to_string());
                    (details.subscription_level, sub_end)
                } else { (0, None) };

                let text = format!("üëë <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π</b>\n\n–í–∞—à —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {}.",
                    match level { 0 => "Free", 1 => "Standard", 2 => "Premium", 3 => "Max", _ => "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π" });
                let keyboard = keyboards::create_subscription_menu_keyboard(level, end_date_str);
                bot.edit_message_text(original_message.chat.id, original_message.id, text)
                    .reply_markup(keyboard)
                    .parse_mode(ParseMode::Html)
                    .await?;
                bot.answer_callback_query(q.id.clone()).await?;
            }
            "help_info" => {
                let help_text = format!(
                    "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n–ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ä–∞–∑–ª–∏—á–Ω—ã–º AI –º–æ–¥–µ–ª—è–º...\n\n–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–æ–¥–ø–∏—Å–∫–∏: @{}\n–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: @{}",
                    CONFIG.sub_contact, CONFIG.support_contact); // Shortened for brevity
                let keyboard = InlineKeyboardMarkup::new(vec![vec![InlineKeyboardButton::callback("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")]]);
                bot.edit_message_text(original_message.chat.id, original_message.id, help_text)
                    .reply_markup(keyboard).parse_mode(ParseMode::Html).await?;
                bot.answer_callback_query(q.id.clone()).await?;
            }
            _ if data.starts_with("set_text_model:") => {
                let model_name = data.trim_start_matches("set_text_model:");
                match db_pool.set_last_used_model(user_id, model_name).await {
                    Ok(_) => {
                        let keyboard = keyboards::create_text_model_selection_keyboard(Some(model_name));
                        bot.edit_message_reply_markup(original_message.chat.id, original_message.id)
                            .reply_markup(keyboard).await?;
                        bot.answer_callback_query(q.id.clone()).text(&format!("–¢–µ–∫—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {}", model_name)).await?;
                    }
                    Err(e) => {
                        log::error!("Failed to set text model for user {}: {}", user_id, e);
                        bot.answer_callback_query(q.id.clone()).text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –º–æ–¥–µ–ª–∏.").show_alert(true).await?;
                    }
                }
            }
             _ if data.starts_with("set_image_model:") => {
                let model_name = data.trim_start_matches("set_image_model:");
                match db_pool.set_last_used_image_model(user_id, model_name).await {
                    Ok(_) => {
                        let keyboard = keyboards::create_image_generation_menu_keyboard(Some(model_name));
                        bot.edit_message_reply_markup(original_message.chat.id, original_message.id)
                            .reply_markup(keyboard).await?;
                        bot.answer_callback_query(q.id.clone()).text(&format!("–ú–æ–¥–µ–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {}", model_name)).await?;
                    }
                    Err(e) => {
                        log::error!("Failed to set image model for user {}: {}", user_id, e);
                        bot.answer_callback_query(q.id.clone()).text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –º–æ–¥–µ–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.").show_alert(true).await?;
                    }
                }
            }
            "admin_panel" => {
                if CONFIG.admin_ids.contains(&user_id) {
                    let text = "üõ†Ô∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>";
                    let keyboard = keyboards::create_admin_panel_keyboard();
                    bot.edit_message_text(original_message.chat.id, original_message.id, text)
                        .reply_markup(keyboard).parse_mode(ParseMode::Html).await?;
                    bot.answer_callback_query(q.id.clone()).await?;
                } else {
                    bot.answer_callback_query(q.id.clone()).text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.").show_alert(true).await?;
                }
            }
            "sub_status_info" => { bot.answer_callback_query(q.id.clone()).await?; }
            _ => {
                log::warn!("Unhandled callback data: '{}' from user {}", data, user_id);
                bot.answer_callback_query(q.id.clone()).text("–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∏–ª–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.").await?;
            }
        }
    } else {
        log::warn!("Callback query from user {} has no data.", user_id);
        bot.answer_callback_query(q.id.clone()).text("–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.").show_alert(true).await?;
    }

    Ok(())
}
